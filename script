local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Zbot",
    Icon = 11419664015, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Zbot",
    LoadingSubtitle = "by ZBOT",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = zbot, -- Create a custom folder for your hub/game
       FileName = "Zbot Config"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Key",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"key"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

local Movement = Window:CreateTab("Movement", 12975608939) -- Title, Image
local Section = Movement:CreateSection("Movement")

-- Create Walk Speed Slider
local Slider = Movement:CreateSlider({
   Name = "Walk Speed", -- Displayed name for the slider
   Range = {0, 500}, -- Walk speed range from 0 to 100
   Increment = 1, -- Increment value for each adjustment
   Suffix = "Walk Speed", -- Text that appears after the value
   CurrentValue = 16, -- Default value for the walk speed
   Flag = "Walk Speed", -- Configuration flag for saving the value
   Callback = function(Value)
       -- Function that executes when the slider value is changed
       
       -- Ensure the player has a character and humanoid object
       local player = game.Players.LocalPlayer
       local character = player.Character or player.CharacterAdded:Wait()
       local humanoid = character:WaitForChild("Humanoid")

       -- Set the player's walk speed to the selected slider value
       humanoid.WalkSpeed = Value
   end,
})

-- Create Jump Power Slider
local Slider = Movement:CreateSlider({
   Name = "Jump Power", -- Displayed name for the slider
   Range = {50, 500}, -- Jump power range from 50 to 500
   Increment = 1, -- Increment value for each adjustment
   Suffix = "Jump Power", -- Text that appears after the value
   CurrentValue = 50, -- Default value for the jump power
   Flag = "Jump Power", -- Configuration flag for saving the value
   Callback = function(Value)
       -- Function that executes when the slider value is changed
       
       -- Ensure the player has a character and humanoid object
       local player = game.Players.LocalPlayer
       local character = player.Character or player.CharacterAdded:Wait()
       local humanoid = character:WaitForChild("Humanoid")

       -- Set the player's jump power to the selected slider value
       humanoid.JumpPower = Value
   end,
})

local Settings = Window:CreateTab("Settings", 11293977610) -- Title, Image
local Section = Settings:CreateSection("Settings")

-- Create a ScreenGui for the HUD
local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "HUD"
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create a frame to hold the HUD elements with transparency of 0.25 and rounded edges
local hudFrame = Instance.new("Frame")
hudFrame.Name = "HUDFrame"
hudFrame.Size = UDim2.new(0, 300, 0, 30)
hudFrame.Position = UDim2.new(0, 10, 0, 10)
hudFrame.BackgroundTransparency = 0.3
hudFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
hudFrame.Visible = false  -- Initially set to false (HUD is hidden)
hudFrame.Parent = screenGui

-- Apply rounded corners to the frame
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 10)  -- Adjust corner radius for desired roundness
uiCorner.Parent = hudFrame

-- Create the TextLabel for the position display
local positionLabel = Instance.new("TextLabel")
positionLabel.Position = UDim2.new(0, 10, 0, 0)
positionLabel.Size = UDim2.new(0, 280, 0, 30)
positionLabel.BackgroundTransparency = 1
positionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
positionLabel.Font = Enum.Font.SourceSans
positionLabel.TextSize = 24
positionLabel.Text = "Position: Loading..."
positionLabel.TextWrapped = true
positionLabel.Parent = hudFrame

-- Update the position (coordinates) of the player
local function updatePosition()
	local position = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position
	if position then
		positionLabel.Text = string.format("Position: X: %.2f Y: %.2f Z: %.2f", position.X, position.Y, position.Z)
	else
		positionLabel.Text = "Position: N/A"
	end
end

-- Create a Toggle to show or hide the HUD
local Toggle = Settings:CreateToggle({
    Name = "Toggle HUD Visibility",  -- Name of the toggle button
    CurrentValue = false,           -- Default state: Hidden
    Flag = "ToggleHUD",              -- A flag is the identifier for the toggle
    Callback = function(Value)
        -- The function that gets triggered when the toggle state changes
        if Value then
            hudFrame.Visible = true  -- Show the HUD when toggle is true
        else
            hudFrame.Visible = false -- Hide the HUD when toggle is false
        end
    end,
})

-- Update position every 0.1 seconds, if the HUD is visible
while true do
    if hudFrame.Visible then
        updatePosition()
    end
    wait(0.1)  -- Update at a quicker interval (for real-time tracking)
end

local StatusUI = nil

-- Create the new toggle to show the settings status
local StatusToggle = Settings:CreateToggle({
    Name = "Show Settings Status", -- Name of the toggle button
    CurrentValue = false,          -- Default state: Hidden
    Flag = "ShowSettingsStatus",   -- A flag for the identifier of the toggle
    Callback = function(Value)
        if Value then
            -- Show the settings status UI
            StatusUI.Visible = true
        else
            -- Hide the settings status UI
            StatusUI.Visible = false
        end
    end,
})

-- Create a ScreenGui for the settings status UI
local statusGui = Instance.new("ScreenGui")
statusGui.Name = "SettingsStatusUI"
statusGui.Parent = player:WaitForChild("PlayerGui")

-- Create a frame to hold the status UI
StatusUI = Instance.new("Frame")
StatusUI.Name = "StatusFrame"
StatusUI.Size = UDim2.new(0, 250, 0, 180)
StatusUI.Position = UDim2.new(0, 550, 0, 10) -- Position on the right side
StatusUI.BackgroundTransparency = 0.3
StatusUI.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
StatusUI.Visible = false  -- Initially hidden
StatusUI.Parent = statusGui

-- Apply rounded corners to the status frame
local uiCornerStatus = Instance.new("UICorner")
uiCornerStatus.CornerRadius = UDim.new(0, 10)  -- Adjust corner radius
uiCornerStatus.Parent = StatusUI

-- Create a TextLabel to display the current settings status
local statusLabel = Instance.new("TextLabel")
statusLabel.Position = UDim2.new(0, 10, 0, 10)
statusLabel.Size = UDim2.new(0, 230, 0, 160)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statusLabel.Font = Enum.Font.SourceSans
statusLabel.TextSize = 18
statusLabel.Text = "Settings Status:\nLoading..."
statusLabel.TextWrapped = true
statusLabel.Parent = StatusUI

-- Function to update the status UI
local function updateStatus()
    local walkSpeedValue = game.Players.LocalPlayer.Character:WaitForChild("Humanoid").WalkSpeed
    local jumpPowerValue = game.Players.LocalPlayer.Character:WaitForChild("Humanoid").JumpPower
    local hudVisibility = hudFrame.Visible
    local hudStatus = hudVisibility and "Visible" or "Hidden"
    
    statusLabel.Text = string.format("Settings Status:\n\nWalk Speed: %.2f\nJump Power: %.2f\nHUD: %s", 
                                      walkSpeedValue, jumpPowerValue, hudStatus)
end

-- Update the status every 0.5 seconds
while true do
    if StatusUI.Visible then
        updateStatus()
    end
    wait(0.5)  -- Update at a regular interval
end

Rayfield:LoadConfiguration()
