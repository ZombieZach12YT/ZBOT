local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Zbot",
    Icon = 11419664015, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Zbot",
    LoadingSubtitle = "by ZBOT",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = zbot, -- Create a custom folder for your hub/game
       FileName = "Zbot Config"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Key",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"key"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

local Movement = Window:CreateTab("Movement", 12975608939) -- Title, Image
local Section = Movement:CreateSection("Movement")

-- Create Walk Speed Slider
local Slider = Movement:CreateSlider({
   Name = "Walk Speed", -- Displayed name for the slider
   Range = {0, 500}, -- Walk speed range from 0 to 100
   Increment = 1, -- Increment value for each adjustment
   Suffix = "Walk Speed", -- Text that appears after the value
   CurrentValue = 16, -- Default value for the walk speed
   Flag = "Walk Speed", -- Configuration flag for saving the value
   Callback = function(Value)
       -- Function that executes when the slider value is changed
       
       -- Ensure the player has a character and humanoid object
       local player = game.Players.LocalPlayer
       local character = player.Character or player.CharacterAdded:Wait()
       local humanoid = character:WaitForChild("Humanoid")

       -- Set the player's walk speed to the selected slider value
       humanoid.WalkSpeed = Value
   end,
})

-- Create Jump Power Slider
local Slider = Movement:CreateSlider({
   Name = "Jump Power", -- Displayed name for the slider
   Range = {50, 500}, -- Jump power range from 50 to 500
   Increment = 1, -- Increment value for each adjustment
   Suffix = "Jump Power", -- Text that appears after the value
   CurrentValue = 50, -- Default value for the jump power
   Flag = "Jump Power", -- Configuration flag for saving the value
   Callback = function(Value)
       -- Function that executes when the slider value is changed
       
       -- Ensure the player has a character and humanoid object
       local player = game.Players.LocalPlayer
       local character = player.Character or player.CharacterAdded:Wait()
       local humanoid = character:WaitForChild("Humanoid")

       -- Set the player's jump power to the selected slider value
       humanoid.JumpPower = Value
   end,
})

local Settings = Window:CreateTab("Settings", 11293977610) -- Title, Image
local Section = Settings:CreateSection("Settings")

local lightMode = {
   TextColor = Color3.fromRGB(0, 0, 0), -- Black text
   Background = Color3.fromRGB(255, 255, 255), -- White background
   Topbar = Color3.fromRGB(240, 240, 240),
   Shadow = Color3.fromRGB(200, 200, 200),
   NotificationBackground = Color3.fromRGB(255, 255, 255),
   NotificationActionsBackground = Color3.fromRGB(200, 200, 200),
   TabBackground = Color3.fromRGB(230, 230, 230),
   TabStroke = Color3.fromRGB(180, 180, 180),
   TabBackgroundSelected = Color3.fromRGB(180, 180, 180),
   TabTextColor = Color3.fromRGB(0, 0, 0),
   SelectedTabTextColor = Color3.fromRGB(50, 50, 50),
   ElementBackground = Color3.fromRGB(240, 240, 240),
   ElementBackgroundHover = Color3.fromRGB(220, 220, 220),
   SecondaryElementBackground = Color3.fromRGB(255, 255, 255),
   ElementStroke = Color3.fromRGB(150, 150, 150),
   SecondaryElementStroke = Color3.fromRGB(180, 180, 180),
   SliderBackground = Color3.fromRGB(50, 138, 220),
   SliderProgress = Color3.fromRGB(50, 138, 220),
   SliderStroke = Color3.fromRGB(58, 163, 255),
   ToggleBackground = Color3.fromRGB(240, 240, 240),
   ToggleEnabled = Color3.fromRGB(0, 146, 214),
   ToggleDisabled = Color3.fromRGB(150, 150, 150),
   ToggleEnabledStroke = Color3.fromRGB(0, 170, 255),
   ToggleDisabledStroke = Color3.fromRGB(200, 200, 200),
   ToggleEnabledOuterStroke = Color3.fromRGB(200, 200, 200),
   ToggleDisabledOuterStroke = Color3.fromRGB(180, 180, 180),
   DropdownSelected = Color3.fromRGB(200, 200, 200),
   DropdownUnselected = Color3.fromRGB(240, 240, 240),
   InputBackground = Color3.fromRGB(255, 255, 255),
   InputStroke = Color3.fromRGB(180, 180, 180),
   PlaceholderColor = Color3.fromRGB(100, 100, 100)
}

local darkMode = {
   TextColor = Color3.fromRGB(240, 240, 240),
   Background = Color3.fromRGB(25, 25, 25),
   Topbar = Color3.fromRGB(34, 34, 34),
   Shadow = Color3.fromRGB(20, 20, 20),
   NotificationBackground = Color3.fromRGB(20, 20, 20),
   NotificationActionsBackground = Color3.fromRGB(230, 230, 230),
   TabBackground = Color3.fromRGB(80, 80, 80),
   TabStroke = Color3.fromRGB(85, 85, 85),
   TabBackgroundSelected = Color3.fromRGB(210, 210, 210),
   TabTextColor = Color3.fromRGB(240, 240, 240),
   SelectedTabTextColor = Color3.fromRGB(50, 50, 50),
   ElementBackground = Color3.fromRGB(35, 35, 35),
   ElementBackgroundHover = Color3.fromRGB(40, 40, 40),
   SecondaryElementBackground = Color3.fromRGB(25, 25, 25),
   ElementStroke = Color3.fromRGB(50, 50, 50),
   SecondaryElementStroke = Color3.fromRGB(40, 40, 40),
   SliderBackground = Color3.fromRGB(50, 138, 220),
   SliderProgress = Color3.fromRGB(50, 138, 220),
   SliderStroke = Color3.fromRGB(58, 163, 255),
   ToggleBackground = Color3.fromRGB(30, 30, 30),
   ToggleEnabled = Color3.fromRGB(0, 146, 214),
   ToggleDisabled = Color3.fromRGB(100, 100, 100),
   ToggleEnabledStroke = Color3.fromRGB(0, 170, 255),
   ToggleDisabledStroke = Color3.fromRGB(125, 125, 125),
   ToggleEnabledOuterStroke = Color3.fromRGB(100, 100, 100),
   ToggleDisabledOuterStroke = Color3.fromRGB(65, 65, 65),
   DropdownSelected = Color3.fromRGB(40, 40, 40),
   DropdownUnselected = Color3.fromRGB(30, 30, 30),
   InputBackground = Color3.fromRGB(30, 30, 30),
   InputStroke = Color3.fromRGB(65, 65, 65),
   PlaceholderColor = Color3.fromRGB(178, 178, 178)
}

local currentMode = darkMode  -- Default to dark mode

local Toggle = Settings:CreateToggle({
   Name = "Light/Dark Mode",
   CurrentValue = false,
   Flag = "ModeToggle", -- Identifier for the configuration
   Callback = function(Value)
       if Value then
           -- Switch to light mode
           currentMode = lightMode
       else
           -- Switch to dark mode
           currentMode = darkMode
       end
       
       -- Apply the current mode's colors to the UI elements
       -- Example: Apply the background color
       game:GetService("TweenService"):Create(
           game:GetService("Workspace").CurrentCamera,
           TweenInfo.new(0.5),
           { BackgroundColor = currentMode.Background }
       ):Play()

       -- Similarly, apply other UI elements' colors based on `currentMode`
       -- You can continue applying colors like `currentMode.TextColor`, `currentMode.ToggleBackground`, etc.
   end,
})


Rayfield:LoadConfiguration()
